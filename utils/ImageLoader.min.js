"use strict"; var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) { return typeof t } : function (t) { return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t }; !function (t, e) { "object" === ("undefined" == typeof exports ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : global.ImageLoader = e() }(0, function () { function t(t) { var e = t.src, o = t.status, s = void 0 !== o && o; this.src = e, this.status = s } function e(t) { this instanceof e || console.error("ImageLoader is a constructor and should be called with the `new` keyword"), this._init(t) } return e.prototype._init = function (t) { var e = t.base, o = t.source, s = t.loading, n = t.loaded; if (void 0 === (void 0 === e ? "undefined" : _typeof(e))) return void console.error("base is a required"); this.base = e, this.source = o, this.loading = s, this.loaded = n, this.time = 0, this.total = 0; var i = 0, r = 0; Object.defineProperty(this, "successCount", { get: function () { return i }, set: function (t) { this.sourceLoaded(), i = t } }), Object.defineProperty(this, "failCount", { get: function () { return r }, set: function (t) { this.sourceLoaded(), r = t } }), this.start = +new Date, this.readyLoad = this.loadSource() }, e.prototype.sourceLoaded = function () { this.successCount + this.failCount === this.total ? this.loaded({ status: 0 === this.failCount, timecost: +new Date - this.start, success: this.successCount, fail: this.failCount, totalcount: this.total, sourceLoaded: this.readyLoad }) : this.loading({ status: !1, percent: this.successCount / this.total }) }, e.prototype.loadSource = function () { var e = this, o = []; try { o = JSON.parse(JSON.stringify(this.source)) } catch (t) { o = [] } var s = function (t) { return t.map(function (t) { return n(t) }) }, n = function o(n) { var i = new t({ src: "", status: !1 }); if ("string" == typeof n) return i.src = "" + e.base + n, e.total = ++e.total, wx.getImageInfo({ src: i.src, success: function (t) { i.status = !0, e.successCount = ++e.successCount }, fail: function (t) { i.fail = !0, e.failCount = ++e.failCount } }), i; if ("object" === (void 0 === n ? "undefined" : _typeof(n))) { if (Array.isArray(n)) return s(n); for (var r in n) n.hasOwnProperty(r) && (n[r] = o(n[r])); return n } return null }; return "object" === (void 0 === o ? "undefined" : _typeof(o)) ? s(Array.isArray(o) ? o : [o]) : new t({ src: "" + this.base + o, status: !1 }) }, e });